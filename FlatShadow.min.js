var $jscomp={scope:{},inherits:function(a,c){function b(){}b.prototype=c.prototype;a.prototype=new b;a.prototype.constructor=a;for(var f in c)if(Object.defineProperties){var k=Object.getOwnPropertyDescriptor(c,f);k&&Object.defineProperty(a,f,k)}else a[f]=c[f]}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,c,b){if(b.get||b.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[c]=b.value)};
$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(a){return $jscomp.SYMBOL_PREFIX+(a||"")+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.Symbol.iterator;a||(a=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&$jscomp.defineProperty(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(a){var c=0;return $jscomp.iteratorPrototype(function(){return c<a.length?{done:!1,value:a[c++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};$jscomp.makeIterator=function(a){$jscomp.initSymbolIterator();var c=a[Symbol.iterator];return c?c.call(a):$jscomp.arrayIterator(a)};
var ShadowType={box:0,text:1,all:2},ShadowDirection={down:0,downRight:45,right:90,topRight:135,top:180,topLeft:225,left:270,downLeft:315},Shadow=function(a,c,b){b=void 0===b?ShadowDirection.downRight:b;this.lenght=void 0===a?100:a;this.angle=b;this.color=void 0===c?"#CCC":c},BoxShadow=function(a,c,b){b=void 0===b?ShadowDirection.downRight:b;Shadow.call(this,void 0===a?100:a,void 0===c?"#CCC":c,b);this.type=ShadowType.box};$jscomp.inherits(BoxShadow,Shadow);
var TextShadow=function(a,c,b){b=void 0===b?ShadowDirection.downRight:b;Shadow.call(this,void 0===a?100:a,void 0===c?"#CCC":c,b);this.type=ShadowType.text};$jscomp.inherits(TextShadow,Shadow);
function drawShadow(a,c){for(var b=[],f=1;f<arguments.length;++f)b[f-1]=arguments[f];for(var k=function(a){a.style.boxShadow=m.slice(0,-1);a.style.textShadow=n.slice(0,-1)},f=function(a){Array.prototype.forEach.call(a,function(a){k(a)})},l=function(a,b){return a*g+"px "+a*h+"px "+b.color+","},p="[object HTMLCollection]"=={}.toString.call(a),n="",m="",g,h,b=$jscomp.makeIterator(b),d=b.next();!d.done;d=b.next()){d=d.value;switch(d.angle){case ShadowDirection.right:g=1;h=0;break;case ShadowDirection.top:g=
0;h=-1;break;case ShadowDirection.left:g=-1;h=0;break;case ShadowDirection.down:g=0;h=1;break;default:h=Math.cos(d.angle*Math.PI/180),g=Math.sin(d.angle*Math.PI/180)}switch(d.type){case ShadowType.box:for(var e=0;e<d.lenght;e++)m+=l(e,d);break;case ShadowType.text:for(e=0;e<d.lenght;e++)n+=l(e,d);break;case ShadowType.all:for(e=0;e<d.lenght;e++)m+=l(e,d),n+=l(e,d);break;default:console.error("Invalid shadow type... Use 'ShadowType.box' or 'ShadowType.text'... ")}}p?f(a):k(a)}
function clearShadow(a){a.style.textShadow=""};
